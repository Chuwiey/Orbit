
var path = require('path');
var fs = require('fs');
var util = require('util');

var Suckle = require('suckle');
var fraction = require('fraction');

var cssmin = require('ycssmin').cssmin;
var uglify = require('../deps/uglify-js');

const A = Array.prototype;

/**
 * @constructor Minifier
 */

var Stream = require('stream').Stream;

function Minifier() {
  Stream.apply(this);
  this.readable = true;
};

util.inherits(Minifier, Stream);

/**
 * Initialize minification
 *
 * @param {String, Array, ReadStream} inputStream
 * @param [Object] options
 * @param [Function] callback
 */

Minifier.prototype.minify = function() {
  var args = A.slice.call(arguments);
  var inputStream;

  if (typeof args[args.length - 1] === 'function') {
    this.callback = args.pop();
  };

  switch (args[0].constructor) {
    case String:
      inputStream = fs.createReadStream(args.shift());
    break;
    case Array:
      var inputAr = args[0];
      var pathName = inputAr[0];

      var data = inputAr.map(function(input) {
        return fs.readFileSync(input, 'utf8');
      }).join('');

      inputStream = fraction.createStream(data);
      inputStream.path = pathName;
    break;
    case fs.ReadStream:
      inputStream = args.shift();
    break;
  };

  if (!inputStream) {
    throw new Error('First argument must be a String or ReadStream');
  };

  if (inputStream.pause) {
    inputStream.pause();
  };

  this.options = args.shift() || {};
  this.filePath = inputStream.path;
  this.fileType = path.extname(this.filePath);

  if (!/\.(js|css)$/.test(this.fileType)) {
    throw new Error('Invalid file type -- cannot minify "' + fileType + '"');
  };

  var callback = inputRead.bind(this);

  var mux = new Suckle(callback);

  inputStream.pipe(mux);

  if (inputStream.resume) {
    inputStream.resume();
  };

  return this;
};

/**
 * Callback for after the input
 * stream has been read. This is
 * where the read data is minified.
 *
 * @param {Buffer} data
 * @api private
 */

function inputRead(data) {
  var fileType = this.fileType;
  var callback = this.callback;
  var options  = this.options;
  var proxy    = this.proxy;

  var data = data.toString();
  var result, err;

  // Minify the data using uglifyjs or cssmin
  var minify = fileType === '.js' ? uglify : cssmin;

  try {
    result = minify(data);
  } catch(exception) {
    err = exception;
    result = data;
  };

  // Call the callback
  callback && callback(err, result);

  // Create a streamable buffer
  var out = fraction.createStream(result, options);

  // Proxy the output stream
  out.emit = this.emit.bind(this);
};

/**
 * Return a new Minifier instance
 *
 * @api private
 */

function createMinifier() {
  var M = new Minifier;
  return M.minify.apply(M, arguments);
};

exports.Minifier = Minifier;

exports.minify = exports.createStream = createMinifier;
