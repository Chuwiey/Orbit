
var Stream = require('stream').Stream;
var util = require('util');
var bufferUtils = require('./bufferUtils');

function Suckle() {
  Stream.apply(this);

  this.writable = true;
  this.callbacks = [];
  this.chunks = [];
  this.length = 0;

  var args = Array.prototype.slice.call(arguments);

  if (typeof args[args.length-1] === 'function') {
    this.callbacks.push(args.pop());
  };

  this.pipes = args;
};

util.inherits(Suckle, Stream);

Suckle.createStream = function() {
  return new this;
};

Suckle.prototype.onComplete =
Suckle.prototype.oncomplete = function(fn) {
  this.callbacks.push(fn);
};

Suckle.prototype.pipe = function(destination) {
  var destinations = Array.prototype.slice.call(arguments);
  this.pipes = this.pipes.concat(destinations);
  return destinations[destinations.length-1];
};

Suckle.prototype.invokeCallbacks = function() {
  var chunks = this.chunks;
  var length = this.length;

  var buff = bufferUtils.concat(chunks, length);

  var callbacks = this.callbacks;
  var callback;

  while (callback = callbacks.shift()) {
    callback(buff, length);
  };
};

Suckle.prototype.appendData = function(data, encoding) {
  if (!this.callbacks.length) return;

  var buff = bufferUtils.isBuffer(data) ? data 
  : new Buffer(data, encoding);

  this.chunks.push(buff);
  this.length += buff.length;
};

Suckle.prototype.write = function(data, encoding) {
  var pipes = this.pipes;
  var len = pipes.length;

  for (var i=0; i<len; i++) {
    pipes[i].write(data, encoding);
  };

  this.appendData(data, encoding);
};

Suckle.prototype.end = function() {
  var pipes = this.pipes;
  var len = pipes.length;

  for (var i=0; i<len; i++) {
    pipes[i].end();
  };

  this.invokeCallbacks();
};

module.exports = Suckle;
